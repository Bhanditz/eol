#tabs_sidebar.data
  %ul.tabs.with_icons{ class: 'subtabs' }
    %li.all{ class: 'active' }= link_to I18n.t(:all_categories), taxon_data_path(@taxon_page)
    - @page_traits.categories.each do |category|
      -# TODO: the class needs to be active if its toc_id was passed in...
      %li= link_to category.label, taxon_data_path(@taxon_page, toc_id: category.id), data: { toc_id: category.id }
    -# TODO: range data, which we do not have yet.
    - unless @page_traits.glossary.blank?
      %li.glossary.start_section= link_to I18n.t(:glossary_subhead).html_safe, glossary_taxon_data_path(@taxon_page)
    -# TODO: This class needs to be start_section if the glossary tab is missing.
    %li.about= link_to I18n.t(:data_subtab_about), about_taxon_data_path(@taxon_page)
.main_container#taxon_data
  .help_text
    %p
      = t(:data_disclaimer,
        traitbank_search_path: data_search_path(taxon_concept_id: @taxon_concept),
        traitbank_info_path: cms_page_path('traitbank')).html_safe
  - @page_traits.categories.each do |category|
    .header_underlined
      %h3= category.label
    - last_predicate = nil
    - type_index = 0 # TODO: what is this for?
    %table.standard.categorized.data{ summary: I18n.t(:data_table_summary,
      taxon: @taxon_page.scientific_name),
      data: { more: I18n.t(:data_show_n_more_rows), 'toc_id' => category.id } }
      - @page_traits.traits_by_category(category).each do |trait|
        - if trait.point.nil?
          %tr.data
            %th.predicate
              %div.term
                = "Could not find a data point for #{trait.point}"
          - next
        - classes = []
        - unless trait.point.visible?
          - if current_user.is_curator?
            - classes << 'hidden'
          - else
            - next
        - else
          - first = trait.predicate_name != last_predicate
          - header_id = nil
          - row_is_selected = (@selected_data_point_uri_id && @selected_data_point_uri_id.to_i == data_point_uri.id)
          -# using the instance methods as opposed to scopes allows us to use
          -# preloaded taxon_data_exemplars
          - exemplar = trait.point.taxon_data_exemplars.select(&:included?).any?
          - excluded = trait.point.taxon_data_exemplars.select(&:excluded?).any?
          - if first
            - classes << 'first'
            - type_index += 1
            - header_id = trait.point.header_anchor
            - last_predicate = trait.predicate_name
          %tr.data{ id: trait.anchor, class: (classes + ['data']).join(' '), data: { type: type_index.nil? ? nil : "type_#{type_index}" } }
            %th.predicate{ id: header_id }
              - if first
                %a.info_icon
                  \&nbsp;
                .term{ data: { term: "TODO" }}
                  - add_exemplar_or_excluded_icon(exemplar: exemplar, excluded: excluded)
                  = trait.predicate_name
                  - if method = trait.statistical_method?
                    %span.stat
                      = trait.statistical_method_names.join(", ")
                  %span.info
                    %ul.glossary
                      = render(partial: 'known_uris/definition',
                      locals: { known_uri: trait.predicate_uri, search_link: true, glossary_link: true })
            %td.val{ headers: header_id, id: "#{header_id}_d" }
              %span.fold
                = link_to(image_tag("arrow_fold_down.png",
                  alt: I18n.t(:data_row_additional_detail_alt)),
                  taxon_data_path(@taxon_concept,
                  data_point_uri_id: trait.point.id, anchor: trait.anchor),
                  title: I18n.t(:data_row_additional_detail_assistive))
              .term{ data: { term: "TODO" }}
                - add_exemplar_or_excluded_icon(exemplar: exemplar, excluded: excluded)
                - value = trait.value_name
                - if value.is_numeric? && ! trait.predicate_uri.treat_as_string?
                  - if value.is_float?
                    - if value.to_f < 0.1
                      - value = value.to_f.sigfig_to_s(3)
                    - else
                      - value = value.to_f.round(2)
                  = number_with_delimiter(value, delimiter: ',')
                - else
                  -# TODO: we should look for hyperlinks and add them if needed:
                  = value
                - if trait.value_uri && trait.value_uri.is_a?(KnownUri)
                  %span.info
                    %ul.glossary
                      = render(partial: 'known_uris/definition',
                        locals: { known_uri: trait.value_uri, search_link: true,
                        glossary_link: true })
            %td.source
              - if trait.resource
                = link_to(trait.resource.content_partner.name,
                  [trait.partner, trait.resource])
              - else
                = "No resource!"
                = link_to(trait.source_url, trait.source_url)
            %td.comment
              %span.comments
                - if trait.comments.empty?
                  &nbsp;
                - else
                  = image_tag('comment_indicator.png')
          %tr.actions{ id: "#{trait.anchor}_actions", class: (classes + ['actions']).join(' ') }
            %td{ colspan: 4 }
              .actions
                %ul
                  %li
                    - if trait.content_partner
                      = raw I18n.t("data_provided_by_content_partner",
                        whom: link_to(trait.content_partner.name,
                        trait.content_partner))
                    - else
                      = I18n.t(:trait.point_source_missing)
