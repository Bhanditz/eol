#private_data_object_tags_container
  %input{ :type => "hidden", :name => "tagging_data_object", :value => @data_object.id }
  - div_style = visible ? '' : 'display: none;'
  #private_data_object_tags.data_object_tagging{ :style => div_style }
    #my_data_object_tags
      %h1
        = image_tag 'icons/ProfileTag.gif'
        =I18n.t("my_tags")
      .clear_both
      - if logged_in?
        - unless tags.empty?
          - for key in tag_keys(tags)
            .data_object_tag_key_values.values
              - for value in tag_values_for_key(key, tags)
                = render :partial => 'tag_key_value', :locals => { :key => key, :value => value, :can_delete => true }
        - else
          %h2
            =I18n.t("you_have_not_tagged_this_image")
      - elsif $ALLOW_USER_LOGINS
        %h2
          =I18n.t("you_must_be")
          = link_to I18n.t("logged_in_"), login_path(:params => { :return_to => request.env["HTTP_REFERER"].blank? ? root_url : URI.parse(request.env["HTTP_REFERER"]).path })
          to add your own tags.
          
    - if logged_in?
      #add_data_object_tags{ :style => "" }
        %h1
          = image_tag 'icons/plusIcon.gif'
          =I18n.t("add_image_tags")
        %h2
          =I18n.t("separate_tags_with_spaces__cat")
        #add_data_object_tags_fields.clear_both
          - form_tag data_object_tags_path(data_object.id) do
            .label
              %span
                =I18n.t("category")
            .values
              %div
                = text_field_tag 'tag[key]', nil, :class => 'autocomplete', 'autocomplete_url' => autocomplete_for_tag_key_data_object_tags_path(@data_object.id)
            %br
            .label
              %span
                =I18n.t("add_tag")
            .values
              %div
                = text_field_tag 'tag[value]', nil, :class => 'autocomplete', 'autocomplete_url' => autocomplete_for_tag_value_data_object_tag_path(@data_object.id,'TAG_KEY_GOES_HERE')
                %br
                %p
                  %span.error{ :id => "tag_error", :style => "display:none;" }
                    =I18n.t("tag_should_not_be_empty")
                = submit_tag I18n.t("add_this_tag"), :class=>'tag-submit'
