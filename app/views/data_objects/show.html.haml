#page-title
  - type = @type
  - type = 'Video' if DataType.video_type_ids.include?(@data_object.data_type.id)
  %h1= I18n.t("var_type_permalink", :var_type => type)

  %h2
    - @taxon_concepts = @data_object.get_taxon_concepts(:published => :preferred)
    - if @taxon_concepts.blank?
      =I18n.t("__stands_alone__")
    - else
      - if @taxon_concepts[0].published?
        - start_text = @revisions[0].id == @data_object.id ? 'belongs to ' : 'was connected to '
        == ( #{start_text} the following page#{@taxon_concepts.size == 1 ? '' : 's'}:
        - @taxon_concepts.each_with_index do |tc, i|
          - comma = (i+1 == @taxon_concepts.size) ? '' : ', '
          - tc_label = tc.scientific_name
          - tc_label += ": <b>#{tc.common_name}</b>" unless tc.common_name.blank?
          - opts = { :"#{@type.downcase}_id" => @data_object.id }
          = link_to(tc_label, taxon_concept_path(tc.id, opts)) + comma
        )
      - else
        - @taxon_concepts.each do |tc|
          - names = @taxon_concepts.map { |item| tc.scientific_name + (tc.common_name.blank? ? '' : ": <b>#{tc.common_name}</b>") }.uniq
          == associated with the deprecated page#{names.size == 1 ? '' : 's'}: '#{names.join("', '")}')

#page-content.clearfix
  #full-page-content
    #data_object_wrapper
      #data_object_status
        %h3=I18n.t("curation_status")
        - status = @data_object.vetted.label.downcase
        - bg_class = []
        - if status == 'unknown'
          - bg_class << 'unknown-text'
          - status_text = 'not reviewed'
        - else
          - bg_class << 'untrusted-text' if status == 'untrusted'
          - status_text = status
        - bg_class = bg_class.join(' ')
        - bg_class = nil if bg_class.blank?
        %p{ :class => bg_class }
          =I18n.t("this_var_type_downcase_object_", :var_type_downcase => type.downcase)
          %b= status_text
      #data_object_content
        .divider
        %h3=I18n.t("content")
        #data_object{ :class => bg_class }
          - if type == "Video"
            = render :partial => "/shared/show_video"
          - else
            = render :partial => "data_objects/data_object_#{type.downcase}"

      - if(@data_object.data_type.to_s.strip != 'Text')
        #data_object_description
          .divider
          %h3=I18n.t("description")
          = render :partial => 'description', :locals => { :data_object => @data_object }, :layout => @layout
          -#%br

      #data_object_attribution
        .divider
        %h3=I18n.t("attribution")
        = render :partial => 'attribution', :locals => { :data_object => @data_object }, :layout => @layout
        %br

      - unless @data_object.published_entries.blank?
        #data_object_hierarchy
          .divider
            %h3= I18n.t(:hierarch_var_data_object_publi, :var_data_object_published_entries => (@data_object.published_entries == 1 ? 'y' : 'ies'))
          - @data_object.published_entries.each do |phe|
            = phe.ancestors.map { |he| link_to(he.name.string, taxon_concept_path(he.taxon_concept_id)) }.join(' > ')
            %br
      - if @revisions.size > 1
        #data_object_revisions
          .divider
          %h3=I18n.t("revisions")
          %ul
            - @revisions.each do |revision|
              - revision_class = revision.created_at == @data_object.created_at ? 'current_revision' : nil
              %li{ :class => revision_class }= link_to(revision.created_at, data_object_path(revision.id))
      - unless @comments.blank?
        #data_object_comments
          .divider
          %h3=I18n.t("comments")
          #taxaCommentsWrap
            #commentsContain
              = render :partial => 'shared/comments', :locals => { :comments => @comments, :opts => { :params => {:anchor => "commentsContain"} }}
      = render :partial => 'feed_items/index', :locals => {:feed => @data_object.feed}
