- content_for :social_sharing do
  = render :partial => 'shared/social_sharing'
-# TODO - hide this for accessibility.
#tabs_sidebar.data
  %ul.tabs.with_icons
    %li.active= link_to I18n.t(:all_categories), '#', class: 'all'
    - @categories.each do |cat|
      %li= link_to cat.label, '#', 'data-toc-id' => cat.id
    %li= link_to I18n.t(:other_category), '#', class: 'other'
.main_container#taxon_data
  %table.standard.data
    - last_attribute = nil
    - @data.each do |row|
      - next if row[:attribute].blank?
      - classes = []
      - classes = row[:attribute].toc_items.map { |ti| "toc_#{ti.id}" } if row[:attribute].is_a?(KnownUri)
      - classes = ['toc_other'] if classes.blank?
      - classes << 'nested' if row[:attribute] == last_attribute
      %tr{ class: (classes + ['data']).join(' ') }
        %th
          - uri_components = EOL::Sparql.uri_components(row[:attribute])
          %span{ title: uri_components[:uri] }= uri_components[:label]
        %td
          - # displaying values
          - if row[:target_taxon_concept_id] && target_taxon_concept = TaxonConcept.find(row[:target_taxon_concept_id].to_s.split("/").last)
            = link_to raw(target_taxon_concept.title), taxon_data_path(target_taxon_concept)
            - unless target_taxon_concept.subtitle.blank?
              = "(" + target_taxon_concept.subtitle + ")"
          - else
            - uri_components = EOL::Sparql.uri_components(row[:value])
            %span{ title: uri_components[:uri] }= uri_components[:label]

          - # displaying unit of measure
          - if uri_components = EOL::Sparql.components_of_unit_of_measure_label_for_uri(row[:attribute])
            %span{ title: uri_components[:uri] }= uri_components[:label]
          - elsif row[:metadata] && uri_components = EOL::Sparql.get_unit_components_from_metadata(row[:metadata])
            %span{ title: uri_components[:uri] }= uri_components[:label]

          - # displaying metadata
          - if row[:metadata]
            %table.meta
              - row[:metadata].each do |key, value|
                - value = [ value ] unless value.class == Array
                - value.each do |v|
                  %tr
                    - uri_components = EOL::Sparql.uri_components(key)
                    %th{ title: uri_components[:uri] }= uri_components[:label]
                    - if EOL::Sparql.uri_in_eol_triplestore(v)
                      %td= link_to v, ($VIRTUOSO_FACET_BROWSER_URI_PREFIX + CGI.escape(v.to_s)), :target => 'data'
                    - else
                      - uri_components = EOL::Sparql.uri_components(v)
                      %td{ title: uri_components[:uri] }= uri_components[:label]
      %tr{ class: (classes + ['actions']).join(' ') }
        %td{ colspan: 2 }
          %ul
            - if row.has_key?(:user)
              %li= raw I18n.t(:data_provided_by, user: link_to(row[:user].full_name, row[:user]))
            - else
              - resource = TaxonData.graph_name_to_resource(row[:graph])
              -# TODO: i18n
              %li= raw "Source: " + link_to(resource.content_partner.name, resource.content_partner)
            - if row.has_key?(:data_point_uri)
              %li= raw "&bull;"
              %li= link_to row[:data_point_uri], ($VIRTUOSO_FACET_BROWSER_URI_PREFIX + CGI.escape(row[:data_point_uri].to_s)), :target => 'data'
            - if row.has_key?(:user_added_data) && current_user.can_update?(row[:user_added_data])
              %li= raw "&bull;"
              -# TODO: i18n
              %li= link_to "edit", edit_user_added_datum_path(row[:user_added_data]), :method => :get
              %li= raw "&bull;"
              -# TODO: i18n
              %li= link_to "delete", user_added_datum_path(row[:user_added_data]), :method => :delete, :confirm => I18n.t('this_cannot_be_undone_are_you_sure')
      - last_attribute = row[:attribute]
.add_content
  .article
    .header
      %h3= I18n.t('user_added_data.add_data_header')
    = render :partial => 'user_added_data/form'
    -# You can't have nested forms, so this is external. ...It will be handled by Ajax (only), anyway.
    #suggestions{ style: 'display:none;' }
      = render :partial => 'known_uris/categories'
