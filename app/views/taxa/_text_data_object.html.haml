:javascript
  $(document).ready(function() {
    // Hides text-object attribution
    // By default, we only show authors, sources, copyrights, datasuppliers, and sourceurls
    $('div.content-article div.attribution div.credit').each(function() {
      if (!(
          $(this).hasClass('author') ||
          $(this).hasClass('source') ||
          $(this).hasClass('rightsholder') ||
          $(this).hasClass('license') ||
          $(this).hasClass('datasupplier') ||
          $(this).hasClass('indexed') ||
          $(this).hasClass('supplier') ||
          $(this).hasClass('show') ||
          $(this).hasClass('sourceurl')
          ))
        $(this).hide();
    });
  });

- subtitle = content_item.subtitle_to_show
- tw_class = @preview ? '' : "text_object"
- tw_class += @hide ? ' hidden-text' : ''
- tw_class = nil if tw_class.blank? # blank would render class=""; nil won't render class at all.
%div{:id => "text_wrapper_#{content_item.id}", :class => tw_class, :style => (@hide ? "display:none" : nil)}
  %div{:class => "content-article #{vetted_id_class(content_item)}", :id => "text_#{content_item.id}"}
    - if !content_item['users'].nil? && content_item['users'][0].id == current_user.id
      .multi_new_text_error{:style => "display:none;"}
        Only one text object can be edited at a time.
      .edit_text
        = link_to("Edit", {:controller => :data_objects, :action => :edit, :type => :text, :id => content_item.id, :taxon_concept_id => @taxon_concept.id, :toc_id => @category_id}, :id => "edit_text_#{content_item.id}")
      - if subtitle.blank? || (subtitle == category && hide_subtitle)
        %h1 &nbsp;
    
    - unless subtitle.blank? || (subtitle == category && hide_subtitle)
      %h1
        = hh(subtitle)
    .content-attribution-area
      .attribution-header.text-area-header
        = "Source and Additional Information"[]
      = render :partial => 'data_objects/attribution', :locals => { :data_object => content_item }
    %br
    %div{:class => (content_item.vetted_id != Vetted.trusted.id ? "unvetted-background-text" : nil)}
      = content_item.description.sanitize_html
    - unless content_item['refs'].nil?
      .references
        .text-area-header.references-header
          References
        %ul
          -# Checking to see if we should link references
          - ref_class = ''
          - if defined? $REFERENCE_PARSING_ENABLED
            - ref_class = 'biblio-entry' if $REFERENCE_PARSING_ENABLED
          - else
            - parameter = SiteConfigurationOption.find_by_parameter('reference_parsing_enabled') 
            - if parameter && parameter.value == 'true'
              - ref_class = 'biblio-entry'
          
          - content_item['refs'].each do |ref|
            %li{ :class => ref_class, :ref_id => ref.id }
              = ref.full_reference.sanitize_html
              - ref.ref_identifiers.each do |identifier|
                -# we do not show identifier unless we know how to handle them:
                - next unless identifier.display?
                &emsp;
                = external_link_to(identifier.identifier, identifier.link_to_identifier)
  .text_buttons{ :id => "text_buttons_#{content_item.id}" }
    #left_text_buttons_group
      %ul{"data-data_object_id" => content_item.id}
        = render :partial=>'/taxa/data_object_states', :locals => {:dato => content_item}
    - if @taxon_concept.show_curator_controls?
      .text-rating
        = render :partial => '/taxa/star_rating', :locals => {:data_object => content_item}
    #right_text_buttons_group
      - if @taxon_concept.show_curator_controls? && !@preview
        - if !content_item.curated?
          .spinner
            = image_tag('indicator_arrows_black.gif', :style => 'display:none;')
        #right_text_button.curate_button.curate-button-image{ :title => "Curate this text" }
          = link_to '<span class="span_block"></span>', |
            curation_data_object_path(content_item, :taxon_concept_id => @taxon_concept.id), |
            {'data-data_object_id' => content_item.id, |
            :style => comments_style, :class => 'popup-link', |
            :alt => 'Curate this text'} |
      - if !@preview
        = render :partial => '/comments/comment_icon', :locals => { :data_object_id => content_item.id, :title => "Comment on this text", :comments_count => content_item.all_comments.select { |c| c['visible_at'] }.length, :alt => "Comment on this text", :comment_class => 'popup-link', :rel => '' }
  .text-slidebox-border{:id => "text-comments-wrapper-#{content_item.id}", :style => "display:none;"}
    .text-slidebox-container.text-comment-div{:id => "text-comments-#{content_item.id}"}
      -# TODO - we re-use this indicator a lot.  Put it in a div that we can push around the page as needed.
      %p
        = image_tag 'indicator_arrows_black.gif'
        = "Please wait..."[]
  .text-slidebox-border{:id => "text-curation-wrapper-#{content_item.id}", :style => "display:none;"}
    .text-slidebox-container{:id => "text-curation-#{content_item.id}"}
      %p
        = image_tag 'indicator_arrows_black.gif'
        = "Please wait..."[]

  .divider
- if @hide
  :javascript
    $(document).ready(function() {
      $('.hidden-text').slideDown();
    });
