#content
  #profile_open_authentications.site_column
    .copy
      %ul
        - $ENABLED_SOCIAL_PLUGINS.sort_by{|provider_sym| provider_sym.to_s}.each do |oauth_provider|
          %li{:class => oauth_provider}
            = I18n.t(oauth_provider, :scope => [:users, :open_authentications])
            - if connected_oauth_provider = @user.open_authentications.select{|oa| oa.provider == oauth_provider.to_s}.first
              %small
                = I18n.t('helpers.label.open_authentication.connected')
                - unless connected_oauth_provider.verified_at.nil?
                  = t('.last_verified', :time_passed => time_ago_in_words(connected_oauth_provider.verified_at))
                - form_for [@user, connected_oauth_provider], 
                  :html => { :method => :delete, :class => 'button_to',
                  :id => "delete_open_authentication_#{connected_oauth_provider.id}" } do |delete_form|
                  %div
                    = delete_form.submit I18n.t('helpers.submit.open_authentication.destroy'), :class => 'delete'
            - else
              - form_for [@user, @user.open_authentications.build(:provider => oauth_provider)], :html => { :id => "new_open_authentication_#{oauth_provider}" } do |f|
                = f.hidden_field :provider
                %fieldset.actions
                  = f.submit I18n.t('helpers.label.open_authentication.connect')

      = link_to t('.return_link'), edit_user_url(@user)

